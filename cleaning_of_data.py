
"""hotel_moel_text.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11G7PbSjmbMqggv3YWyHty7Rs3a0r_8Mq
    
created by Chetan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re
import nltk
from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
from wordcloud import WordCloud
from nltk.stem.wordnet import WordNetLemmatizer 
import seaborn as sns
from nltk.stem.porter import PorterStemmer
from nltk.tokenize import word_tokenize
from textblob import TextBlob
from sklearn.feature_extraction.text import CountVectorizer

import nltk
nltk.download('wordnet')

data = pd.read_csv("hotel_reviews.csv")

text=[]
for i in data["Review"]:
    y = (re.sub('[^a-zA-Z]', ' ', i))
    y = y.lower()
    text.append(y)

contaction= {"n":"and",
             "n't":"not",
             "nt":"not",
             2:"to",
             "2":"to",
             "dont":"do not",
             "don't":"do not",
             "didnt": "did not",
             "did't":"did not",
             "4*":"for",
             "wasn't":"was not",
             "didn't":"did not",
             "aren't":"are not",
             "don't":"do not",
             "nor":"not",
             "couldn't":"could not",
             "didn":"did not",
             "isn":"is not",
             "isn't":"is not",
             "haven't":"have not"
             }

def cont_to_exp(x):
    if type(x) is str:
        x = x.replace('\\',"" )
        for key in contaction:
            value  = contaction[key]
            x = x.replace(key,value)
        return 
    else:
        return x
     
clean_text = pd.DataFrame(text).apply(lambda x: cont_to_exp(x))

with open("stop.txt","r") as words:
  words = words.read().split("\n")

def lem_word(x):
    text = list(x.split(" "))
    text =[WordNetLemmatizer().lemmatize(w,"v") for w in text if w not in words]
    text = " ".join(text)
    return text    
clean_text = clean_text[0].apply(lambda x: lem_word(x))

clean_text.to_csv("model_2.csv")

clean_text.head()

words

len(clean_text)

